generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String @id @default(uuid()) @db.Uuid
  email        String @unique
  passwordHash String

  isEmailVerified            Boolean   @default(false)
  emailVerificationToken     String?   @unique
  emailVerificationExpiresAt DateTime?

  passwordResetToken     String?   @unique
  passwordResetExpiresAt DateTime?

  phoneNumber                String?   @unique
  isPhoneVerified            Boolean   @default(false)
  phoneVerificationToken     String?
  phoneVerificationExpiresAt DateTime?

  twoFactorEnabled Boolean @default(false)
  twoFactorSecret  String?

  refreshToken String? @unique

  provider   String?
  providerId String?

  role UserRole @default(USER)

  isDeleted Boolean   @default(false)
  deletedAt DateTime?

  lastLoginAt DateTime?
  lastLoginIP String?

  stripeCustomerId String? @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  sessions  Session[]
  profile   Profile?
  essays    Essay[]
  auditLogs AuditLog[]

  subscriptions      Subscription[]
  applicationTimeline ApplicationTimeline[]
  aiResponses        AIResponse[]

  @@index([createdAt])
  @@index([role])
}

model Session {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @db.Uuid
  jwtToken  String   @unique
  createdAt DateTime @default(now())
  expiresAt DateTime
  ipAddress String?
  userAgent String?

  @@index([userId, expiresAt])
}

model AuditLog {
  id        Int      @id @default(autoincrement())
  user      User?    @relation(fields: [userId], references: [id])
  userId    String?  @db.Uuid
  action    String
  meta      Json?
  createdAt DateTime @default(now())
}

model Profile {
  id          Int       @id @default(autoincrement())
  user        User      @relation(fields: [userId], references: [id])
  userId      String    @unique @db.Uuid
  firstName   String?
  lastName    String?
  dateOfBirth DateTime?
  address     String?
  gender      String?
  citizenship String?

  personalStatement     PersonalStatement?
  meaningfulExperiences MeaningfulExperience[]
  additionalActivities  AdditionalActivity[]
  academicInfo          AcademicInfo?

  updatedAt DateTime @updatedAt
}

model PersonalStatement {
  id        Int      @id @default(autoincrement())
  profile   Profile  @relation(fields: [profileId], references: [id])
  profileId Int      @unique
  content   String
  updatedAt DateTime @updatedAt
}

model MeaningfulExperience {
  id           Int     @id @default(autoincrement())
  profile      Profile @relation(fields: [profileId], references: [id])
  profileId    Int
  title        String
  organization String
  totalHours   Int
  description  String
}

model AdditionalActivity {
  id           Int     @id @default(autoincrement())
  profile      Profile @relation(fields: [profileId], references: [id])
  profileId    Int
  title        String
  description  String
  totalHours   Int
  organization String?
}

model AcademicInfo {
  id                  Int       @id @default(autoincrement())
  profile             Profile   @relation(fields: [profileId], references: [id])
  profileId           Int       @unique
  undergraduateSchool String?
  major               String?
  minor               String?
  cumulativeGpa       Float?
  scienceGpa          Float?
  mcatScore           Int?
  mcatDate            DateTime?
  graduationYear      Int?
  otherDetails        String?
}

model School {
  id          Int     @id @default(autoincrement())
  name        String  @unique
  location    String?
  description String?
  website     String?
  essays      Essay[]
}

model Essay {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @db.Uuid
  school    School   @relation(fields: [schoolId], references: [id])
  schoolId  Int
  title     String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Subscription {
  id              String           @id @default(uuid()) @db.Uuid
  user            User             @relation(fields: [userId], references: [id])
  userId          String           @db.Uuid
  planId          String
  billingInterval String           // 'monthly' or 'yearly'
  status          String           // 'active', 'cancelled', 'expired'
  startDate       DateTime
  endDate         DateTime?
  nextBillingDate DateTime?
  amount          Float
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  paymentMethods  PaymentMethod[]
  billingHistory  BillingRecord[]

  @@index([userId])
  @@index([status])
}

model PaymentMethod {
  id            String       @id @default(uuid()) @db.Uuid
  subscription  Subscription @relation(fields: [subscriptionId], references: [id])
  subscriptionId String      @db.Uuid
  type          String      // 'card', 'bank_account', etc.
  last4         String
  brand         String?     // For cards: 'Visa', 'Mastercard', etc.
  expiryMonth   String?
  expiryYear    String?
  cardHolder    String?
  isDefault     Boolean     @default(false)
  stripePaymentMethodId String? @unique
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  @@index([subscriptionId])
}

model BillingRecord {
  id            String       @id @default(uuid()) @db.Uuid
  subscription  Subscription @relation(fields: [subscriptionId], references: [id])
  subscriptionId String      @db.Uuid
  amount        Float
  description   String
  status        String      // 'paid', 'pending', 'failed'
  planName      String
  createdAt     DateTime    @default(now())

  @@index([subscriptionId])
}

model ApplicationTimeline {
  id          String    @id @default(uuid()) @db.Uuid
  user        User      @relation(fields: [userId], references: [id])
  userId      String    @db.Uuid
  name        String
  date        DateTime
  color       String
  status      String    // 'upcoming', 'completed', 'in_progress'
  type        String    // 'deadline', 'milestone', 'event'
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([userId])
  @@index([date])
}

model AIResponse {
  id        String   @id @default(uuid()) @db.Uuid
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @db.Uuid
  prompt    String
  response  Json
  type      String   // 'essay_feedback', 'application_advice', etc.
  createdAt DateTime @default(now())

  @@index([userId])
  @@index([type])
}

enum UserRole {
  USER
  ADMIN
}
